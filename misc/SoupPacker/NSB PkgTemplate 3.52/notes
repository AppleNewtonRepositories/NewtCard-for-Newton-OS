General assumptions	-the "SUCCESSFUL" regional flag is checked in makeIntoPackage, and the process aborts if non-true.	-symboltable is where we store our already-defined symbols so we can re-use them.		Function Descriptions	AlignAddr -	Extends the VBO to a given point, and ensures that the NEXT address		written to is 8-byte aligned.				PARAMETER - the endpoint of the desired address				RETURN VALUE - the aligned version of the parameter				REGIONALS USED - starPart, pkgVBO				MODIFIES - pkgVBO					doHeap - Part of the initialization process.  Ensures WorkCursor is valid, and		sets up index/infoframe information for soup cursors.				PARAMETERS - none				RETURN VALUE - ignored				REGIONALS USED - config, workCursor, workSoup				MODIFIES - workSoup, workCursor, infoFrame, indexArray					encode2 - Called by encodeObject to encode objects of class '2-'6			PARAMETERS - the object to encode				RETURN VALUE - the ptr ref which points to the beginning of the object in			the package.					REGIONALS USED - workPtr, pkgVBO				MODIFIES - workPtr, pkgVBO					encodeArray - Called by encodeObject to encode all arrays except frame maps.  Will			call EncodeObject recursively to encode the objects in the array.			PARAMETERS - the object to encode				RETURN VALUE - the ptr ref which points to the beginning of the object in			the package.					REGIONALS USED - workPtr, pkgVBO				MODIFIES - workPtr, pkgVBO	encodeBinary - Called by encodeObject to encode all binaries except symbols.			PARAMETERS - the object to encode				RETURN VALUE - the ptr ref which points to the beginning of the object in			the package.					REGIONALS USED - workPtr, pkgVBO				MODIFIES - workPtr, pkgVBO	encodeEntryArray - Special-purpose function which walks a cursor (either a soup cursor			or a target cursor) and encodes it as an array.  Calls EncodeObject recursively			to encode the objects in the array.			PARAMETERS - none				RETURN VALUE - the ptr ref which points to the beginning of the object in			the package.					REGIONALS USED - workPtr, pkgVBO, workCursor				MODIFIES - workPtr, pkgVBO, VBOArray, workCursor	EncodeFrame - Called by encodeObject to encode a frame.  Calls EncodeFrameMap to encode			the frame map for the frame.			PARAMETERS - the object to encode				RETURN VALUE - the ptr ref which points to the beginning of the object in			the package.					REGIONALS USED - workPtr, pkgVBO, symbolTable				MODIFIES - workPtr, pkgVBO	EncodeFrameMap - Called by encodeFrame to encode a frame map.			PARAMETERS - the object to encode				RETURN VALUE - the ptr ref which points to the beginning of the object in			the package.					REGIONALS USED - workPtr, pkgVBO				MODIFIES - workPtr, pkgVBO		EncodeImmediate - Called by encodeFrame to encode all immediates, including ints,			chars, special immediates like nil and true, and "weird" immediates.			PARAMETERS - the object to encode				RETURN VALUE - the immediate ref					REGIONALS USED - none				MODIFIES - none			EncodeObject - General purpose object encoder.  Parses the type of the object			and passes control to the appropriate encoding subfunction.					PARAMETERS - the object to encode and an optional type symbol.  Right now,			this symbol is only used to identify the special case of an entry array.					RETURN ALUE - the ref for the encoded object.  This could be an immediate			ref or a pointer ref.					REGIONALS USED - none				MODIFIES - none, directly.							EncodePointer - returns the given address encoded as a pointer ref			PARAMETER - the address				RETURN VALUE - a pointer ref				REGIONALS USED - none				MODIFIES - none					EncodeSymbol - Called by encodeObject, getSymbolRef, and makePart.  Takes a given symbol			and encodes it into the package.  A symbol table is used to so refs can be reused.			PARAMETERS - the object to encode				RETURN VALUE - the ptr ref which points to the beginning of the object in			the package.					REGIONALS USED - workPtr, pkgVBO, symbolTable				MODIFIES - workPtr, pkgVBO, symbolTable		Regional vars	config - the parameter frame from the calling process		assigned in EncodeSoupData()	infoFrame - the soup info frame, if any	indexes - the soup indexes, if any	name - the name for the package in the extras drawer	longname - the full name of the package	packageTemplate - a pointer to the binary object containing our template package.		assigned in initialize()	pkgVBO - the VBO into which we are writing the new package	sourceName - holds name of source soup		assigned in initialize()	startPart - the address (relative to the beginning of the VBO) of the part information		assigned in initialize() (read from VBO)	successful - set to nil on failure, so we can exit with error	symbolTable - our symbol table		initialized in initialize()	targetstore - the destination store for the new package		assigned in initialize()	workCursor - the cursor which contains the entries to encode.	workPtr - the current EOF of the VBO.  Where we write new data.	workSoup - the soup from which workCursor comes.	progresssion of events	initialize()		verify parameters			regional 'sourcename now contains name of source soup		Fetch template package			regional 'packageTemplate now contains a ref to the template		create VBO to hold package (4 bytes longer than template)..			regional 'pkgVBO now contains a reference to the VBO.		call doHeap()			doHeap()				get a cursor and soup ref, if possible				if valid soup, getinfo frame and indexes		copy packageTemplate into pkgVBO		set value of StartPart (this value is retrieved from the first 4 bytes after the header)		return..	check for existence of ProgramSoup and exit if it isn't there..	makeHeader()		figure out the name for the package		write out flags to package header		write out package name to package header	makePart()			x		x	makeIntoPackage()		if regional successful is nil then bail.		used to take vbo and send it to suckpackagefrombinary.		now does essentially nothing.		Calling INFOcall EncodeSoupData with a single parameterinput parameter: a frame{soupCursor : cursor, optional.  getunionsoup(soupName):query({}) used if not supplied.soupName : used if cursor is not supplied.  ":NSBASIC" will be appended if it does not already end with ":NSBASIC"packageName : optional, soupName used if not supplied 		targetstore : optional, default store used if not supplied. 		compander : optional.  name of compander to use for package VBO, or nil for no compression		doInstall : true or nil.  If true, the VBO will be passed to suckPackageFromBinary and installed on the targetStore (or the default store, if targetStore was not provided).  Any previous version(s) of the package will be deleted before the new one is installed.  If this parameter is nil, then the VBO will simply be returned.  Note that if you pass nil as the parameter, then the call to EncodeSoupData will not return until the package has been completely built (in other words, it will open modally).  If you pass true for this parameter, then the EncodeSoupData function will return immediately.		ViewSetupDoneScript : optional.  If included, the VSDS in the package will be replaced by the one provided here.		partFrameSlots : optional.  A frame which contains slots which you would like replaced in the part frame.  Note that the slot must already exist in the part frame for you to be able to replace it's value.  Suggested slots include 'devInstallscript and 'removescript, both of which take the partFrame as a single parameter.  You may also want to replace the icon or iconPro.		}  At an absolute minimum, you would call with a soupName or a soupCursor.  Everything else is optional.