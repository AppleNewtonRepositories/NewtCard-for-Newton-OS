constant vMyMainDataDefSym 	:= '|myDataDef:visualDesigner:NSB| ;constant vMyMainViewDefSym 	:= '|myViewDef:visualDesigner:NSB| ;constant vMyFrameViewDefSym := '|myFrameViewDef:visualDesigner:NSB| ;//OpenResFile(home & "resource.rsrc"); (HELP!)//DefConst('kMoveBack, GetPictAsBits("moveBack", nil));//DefConst('keditProperties, GetPictAsBits("editProperties", nil));constant kmoveback:=nil;constant kEditProperties:=nil;//CloseResFile();/* * This is a routing format which handles 'text and 'frame (despite the name, protoFrameFormat * handles both types. If you want to handle just 'frames, override the dataTypes slot with ['frame]. * * This will be registered in the application installScript with RegisterViewDef(...). * * Note that we won't necessarily be able to view the item in the iobox unless we write a  * NON-ROUTING viewDef for vMyMainDataDefSym so that it can be viewed in the iobox item viewer. */DefConst('vMyFrameRoutingFormat, {		_proto:		protoFrameFormat,	title:		"CustomRoute - picture choice", 	version:	1, 	symbol:		vMyFrameViewDefSym, 	SetupItem:	func(item, targetInfo) begin			inherited:?SetupItem(item, targetInfo);			/*If you have any "preprocessing" to do like set anything in the item or add			 * extra body slots like version slots, or extra data, you can do it here, but if you are			 * trying to actually prep visual shapes, do that in formatInitScript.					 * 			 * Note that by calling inherited, we get the equivalent of:			 *		item.body := targetInfo.target;			 * ...plus if the target is a soup entry alias, it resolves it...			 *			 * Only modify the item, not the target.			 */			// set the title; note that the string will be editable by the user...			item.title := "CustomRoute item: " & datentime(time());			if debug then print("setup Item" & item.title);			item;		end,	textScript: func(fields, target)		clone(target.data);	// our target.data should always be plain text});