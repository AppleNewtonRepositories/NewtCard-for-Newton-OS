// Constants used by BITconstant kRev:="1.01";// Event codes used by systemconstant kEventToolSpecific	:= 1;constant kEventDisconnect	:= 2;constant kEventRelease		:= 3;// Application stateconstant kStateIdle			:= 0;constant kStateConnected	:= 1;// I/O typesconstant kIOTypeTCPIndex		:= 0;					// i.e. streamed dataconstant kIOTypeUDPIndex		:= 1;					// i.e. framed dataDefConst('kDefaultIOTypeChoices, ["TCP","UDP"]);// Defaults for inet endpointconstant kDefaultIOTypeIndex	:= kIOTypeTCPIndex;constant kDefaultLinkId := 1;SetLocalizationFrame({	english: '{},});partData:={};constant kMaxReceiveBufferSize := 8000;  // set arbitrary max buf size...// constants used by IOconstant kCommstrace:=nil;// communcations constantsconstant kState_Disconnected := 'disconnected;	// ready-to-go (default state)constant kState_Connecting := 'connecting;	// in-process of (asynchronous) connectconstant kState_Connected := 'connected;		// connected (requires disconnect)constant kState_Disconnecting := 'disconnecting;	// in-process of (asynchronous) disconnectconstant kState_Outputting :='outputting; // output in progressdefconst('kcomms,	{bps: {name: [300,600,1200,2400,4800,7200,9600,12000,14400,19200,38400,57600,115200,230400],			 value: [k300bps,k600bps,k1200bps,k2400bps,k4800bps,k7200bps,k9600bps,k12000bps,			 			k14400bps,k19200bps,k38400bps,k57600bps,k115200bps,k230400bps]},	 dataBits: {name: [5,6,7,8],	 				value: [k5DataBits,k6DataBits,k7DataBits,k8DataBits]},	 stopbits: {name: [0,1,2],	 				value: [k1stopBits,k1pt5stopBits,k2stopBits]},	 parity:	  {name: ["no","odd","even"],	 				value: [kNoParity,kOddParity,kEvenParity]}	});defconst('kSerialOptions, [			{	label: kCMSAsyncSerial,				type: 'service,				opCode: opSetRequired,				result: nil	},						{	label: kCMOSerialHWChipLoc,				type: 'option,				opCode: opSetRequired,				result: nil,				form: 'template,				data:	{   // services can be kHWLocExternalSerial, kHWLocBuiltInIR, kHWLocPCMCIASlot1					argList: ["extr", 0],					typeList: ['struct, ['array, 'char, 4], 'ulong	],	},	},								{ label: kCMOSerialBuffers,				type: 'option,				opcode: opSetRequired,				data: {arglist: [256, 2048, 8], // out, in, error chars				       typeList: ['struct, 'ulong, 'ulong, 'ulong]}},						{	label:		kCMOSerialIOParms,				type:		'option,				opCode:		opSetRequired,				result:		nil,				form:		'template,				data:	{					arglist:	[k1StopBits,kNoParity,k8DataBits,k9600bps],								typelist:	['struct,'long,'long,'long,'long]	}	},		// bps						{	label:		kCMOInputFlowControlParms,				type:		'option,				opCode:		opSetRequired,				result:		nil,				data:	{					arglist:	[						unicodeDC1, 			// xonChar							unicodeDC3, 			// xoffChar							true, 					// useSoftFlowControl							nil, 					// useHardFlowControl							0, 						// not needed; returned							0,	], 					// not needed; returned						typelist:	['struct,						'byte,					// XON character						'byte,					// XOFF character						'boolean,				// software flow control						'boolean,				// hardware flow control						'boolean,				// hardware flow blocked						'boolean,	],	},	},	// software flow blocked			{	label:		kCMOOutputFlowControlParms,				type:		'option,				opCode:		opSetRequired,				result:		nil,				form:		'template,				data:	{					arglist:	[						unicodeDC1, 			// xonChar							unicodeDC3, 			// xoffChar							true, 					// useSoftFlowControl							nil, 					// useHardFlowControl							0, 						// not needed; returned							0,	], 					// not needed; returned						typelist:	['struct,						'byte,					// XON character						'byte,					// XOFF character						'boolean,				// software flow control						'boolean,				// hardware flow control						'boolean,				// hardware flow blocked						'boolean,	],	},	},	// software flow blocked		]);		defconst('kModemOptions,		[			{	label:		kCMSModemID,			// "mods"				type:		'service,				result:		nil,				opCode:		opSetRequired	},		// 512						{	label:		kCMOModemECType,		// "mecp"				type:		'option,				opCode:		opSetNegotiate,			// 256				result:		nil,				form: 		'template,				data:	{					arglist:[						0,	],					typelist:['struct,						'ulong,	],	},	},						{	label:		kCMOMNPCompression,		// "mnpc"				type:		'option,				opCode:		opSetNegotiate,			// 256				result:		nil,				form: 		'template,				data:	{					arglist:[						kMNPCompressionV42bis + kMNPCompressionMNP5 + kMNPCompressionNone,	],	// 0000 0000 0000 1011					typelist:['struct,						'ulong,	],	},	},		]);